// Default constructor for the parent class (Animal)
Animal();

// Constructor for the parent class (Animal) with parameters

Animal(double weight); // max food weight times 20,current food zero

// Getter function for 'weight' attribute
// Return the value of the 'weight' attribute.
double get_weight();

// Virtual function for adding food to the animal
// Subclasses should implement this function to handle food intake.
virtual bool add_Food();

// attributes
double weight;
int maxFood;
int currentFood;

--------------------------------------

// Subclass - Mammal
// Default constructor for the Mammal subclass
Mammal();

// Constructor for the Mammal subclass with parameters
// Initialize 'weight' and 'spawnSize' attributes using the provided arguments.
Mammal(double weight, int spawnSize);

// Initialize 'numBabies' attribute to 0 (assuming it's the default value).
int numBabies;

// Function to simulate the process of giving birth for mammals
void give_birth();  // so add spawnSize to current number of babies

void add_Food();  // 30 plus 10 for every additional baby so if there were 3
                  // babies it would be 30+3*30
// if adding food makes cuurent food go over max food print "Over fed" and set
// current food to max food

---------------------------------------

// Subclass - Birds
// Constructor for the Birds subclass with parameters
// Initialize 'weight' and 'noOfEggs' attributes using the provided arguments.
Bird(double weight, int noOfEggs);

// Function to add eggs to the bird's nest
void addEggs();

// Function to simulate the process of giving birth for birds
void hatchEggs(int x);  // hatch x number of eggs so increase no of babies by x
                        // and decrease eggs by x

void add_Food();  // add 5 and 2 extra for every baby it has if no of babies
                  // more than 10 add extra 10

// Declare 'noOfEggs' as an integer, and 'noOfBabies' as a boolean, but it might
// be more appropriate as an integer.
int noOfEggs;
bool noOfBabies;  // intially 0 
